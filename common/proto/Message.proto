syntax = "proto3";

option java_package = "cn.ken.im.bean";
option java_outer_classname = "MessageProtos";

enum HeadType {
  LOGIN_REQUEST = 0; // 登录请求
  LOGIN_RESPONSE = 1; // 登录响应
  LOGOUT_REQUEST = 2; // 登出请求
  LOGOUT_RESPONSE = 3; // 登出响应
  HEART_BEAT = 4; // 心跳报文
  MESSAGE_REQUEST = 6; // 聊天消息请求
  MESSAGE_RESPONSE = 7; // 聊天消息响应
  MESSAGE_NOTIFICATION = 8; // 服务器通知
}

/*登录请求消息*/
message LoginRequest {
  string uid = 1; // 用户唯一ID
  string deviceId = 2; // 设备ID
  string password = 3; // 用户密码
  uint32 platform = 4; // 客户端平台windows、mac、android、ios、web
  string appVersion = 5; // APP版本号
}

/*登录响应消息*/
message LoginResponse {
  bool result = 1; // true 表示成功，false表示失败
  uint32 code = 2; // 错误码
  string info = 3; // 错误描述
  uint32 expose = 4; // 错误描述是否提示给用户:1 提示;0 不提示
}

/*聊天消息*/
message MessageRequest {
  uint64 msgId = 1; // 消息id
  string from = 2; // 发送方sessionId
  string to = 3; // 接收方sessionId
  uint64 time = 4; // 时间戳(单位:毫秒)
  uint32 msgType = 5; // 消息类型  1：纯文本 2：音频 3：视频 4：地理位置 5：其他
  string content = 6; // 消息内容
  string url = 7; // 多媒体地址
  string property = 8; // 附加属性
  string fromNick = 9; // 发送者昵称
  optional string json = 10; // 附加的json串
}

/*聊天响应*/
message MessageResponse {
  bool result = 1; // true表示发送成功，false表示发送失败
  uint32 code = 2; // 错误码
  string info = 3; // 错误描述
  uint32 expose = 4; // 错误描述是否提示给用户:1 提示;0 不提示
  bool lastBlock = 5; // 是否作为最后的应答
  fixed32 blockIndex = 6; // 应答的序号
}

/*心跳*/
message MessageHeartBeat {
  uint32   seq = 1;
  string   uid = 2;
  string   json =3;
}

/*通知消息*/
message MessageNotification {
  uint32 msgType = 1; // 通知类型 1 上线 2 下线 ...
  bytes sender = 2;
  string json = 3;
  string timestamp = 4;
}

/*顶层消息*/
// 顶层消息是一种嵌套消息，嵌套了各种类型消息
// 根据消息类型 type的值，最多只有一个有效
message Message {
  HeadType type = 1; // 消息类型
  uint64 sequence = 2; // 消息系列号
  string sessionId = 3;
  optional LoginRequest loginRequest = 4;
  optional LoginResponse loginResponse = 5;
  optional MessageRequest messageRequest = 6;
  optional MessageResponse messageResponse = 7;
  optional MessageNotification notification = 8;
}
// sequence 消息系列号主要用于Request和Response，Response的值必须和Request相同，使得发送端可以进行事务匹配处理
